{"version":3,"sources":["shoesData.js","Cart.js","Watched.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","connect","state","reducer","openState","reducer2","props","Table","striped","bordered","hover","variant","map","item","i","name","quan","onClick","dispatch","type","number","className","aria-hidden","Watched","data","arr","localStorage","getItem","history","useHistory","JSON","parse","shoes","index","imgNum","parseInt","push","src","DetailPage","lazy","stockContext","React","createContext","ShoesInfo","imageRode","useContext","to","width","Test","stock","App","useState","shoesData","setshoes","setStock","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","as","NavDropdown","Item","href","Divider","Jumbotron","Button","exact","path","Provider","value","info","axios","get","then","newShoes","catch","console","log","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","closeDefault","store","createStore","combineReducers","action","indexNum","findIndex","a","modifyState","modifyClose","ReactDOM","render","StrictMode","basename","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.07dd1552.chunk.js","sourcesContent":["// 기본은 export default\nexport default [\n    {  \n        id: 0,\n        title : \"white and Black\",\n        content : \"Born in France\",\n        price: 120000\n    },\n    {  \n        id: 1,\n        title : \"Red Knit\",\n        content : \"Born in Seoul\",\n        price: 110000\n    },\n    {  \n        id: 2,\n        title : \"Grey Yordan\",\n        content : \"Born in the States\",\n        price: 130000\n    }\n];\n\n// 하지만 내보낼 변수가 많다면? export { 변수명1, 변수명2 }","// 장바구니 페이지 만들기\nimport React, {useState, useEffect, useContext} from 'react';\nimport {Table} from 'react-bootstrap';\nimport { connect } from 'react-redux';\n\n// 성능잡기\n// 1. 함수나 오브젝트는 콜백함수로 바로 사용하지말고 선언해서 쓰는것이 좋다\n// >> 메모리 할당때문에\n// 콜백함수나 이름없는 함수들은 재렌더링시 새로 메모리에 할당을해줘야하기때문에 바빠질 수 있음\n// 그걸 방지하기위해 컴포넌트 밖에 선언\n// 단 밑에처럼 Props를 받아와야하면 어쩔 수 없이 컴포넌트안에서 하는 수 밖에?\nlet style = { color : 'white' }\n// 2. 애니메이션을 줄 때 레이아웃 변경 애니메이션은 좋지않다\n// 레이아웃? width, height, margin, padding등등\n// 자바스크립트나 transition을 이용한 레이아웃변경은 브라우저한테 큰 부담을 주는것(렌더링시간이 오래걸림)\n// 그렇게 때문에 transform이나 opacity를 이용해서 애니메이션을 주는게 좋음\n// 3. App.js에서 컴포넌트 import할 때 lazy loding하자\n// App.js방문 시 import한 컴포넌트들을 미리 로드를 시켜놓는다 >> 부담이 된다\n// Lazy loding? 컴포넌트가 필요 할 때만 가져올 수 있게 한다\n// 즉, Detail컴포넌트를 처음부터가 아닌 필요할 때만 가져오게끔하는 방법\n// import대신 lazy + Suspense(컴포넌트)를 사용하자\n// 1) react라이브러리에서 lazy와 Suspense를 가져온다.\n// 2) lazy사용법\n// >> let 컴포넌트명 = lazy(()=>{ return import(컴포넌트 경로명)});\n// 3) 사용을 원하는 컴포넌트명을 Suspense태그로 감싸준다\n// 4) Suspense 속성으로 fallback = {html문구}를 적어준다\n// fallback? 컴포넌트를 로딩전까지 보여줄 html문구를 적어주는 속성(임시 메세지 정도??)\n\nfunction Cart(props){\n    let state = props.state;\n    // 밑에서 지정한 function에서 props화 시켜주었기 때문에 매개변수로 받아와야한다\n\n    function closeAlert () {\n        props.dispatch({ type : 'close' })\n    }\n    return (\n        <div>\n            <Table striped bordered hover variant=\"dark\">\n                <tr>\n                    <th>#</th>\n                    <th>상품명</th>\n                    <th>수량</th>\n                    <th>변경</th>\n                </tr>\n                {\n                    state.map((item, i)=> {\n                        return (\n                            <tr key={i}>\n                                <td>{item.id}</td>\n                                <td>{item.name}</td>\n                                <td>{item.quan}</td>\n                                <td>\n                                    {/* \n                                        redux를 쓰는 이유 두번째\n                                        state 데이터 관리가능\n                                        - redux에선 state데이터의 수정방법을 미리 정의한다\n                                        \n                                        모든것을 셋팅 후 여기서 클릭을 하면 수정하게 하는방법은?\n                                        props명.dispatch() >> dispatch는 고정이기때문에 외워야한다\n                                        (데이터 수정요청)\n                                        dispatch({ type : 원하는 값을 입력 })\n                                        >> 여기서는 버튼 클릭 시 증가라는 값이 입력이 되어 \n                                        reduxer에 있는 action.type에 증가라는 값이 입력이 되게끔했다\n\n                                        만약 데이터를 보내고 싶을때는 payload : 보낼데이터 \n                                        >> 이런식으로 데이터를 보낼 수 있다\n                                        reduc store에 같이 보내진다\n                                    */}\n                                    <button onClick={()=>{\n                                        props.dispatch({ type: '증가' , number : item.id })\n                                    }}>+</button>\n                                    <button onClick={()=>{\n                                        props.dispatch({ type: '감소', number : item.id })\n                                    }}>-</button>\n                                </td>\n                                \n                            </tr>\n                        )\n                    })\n                }\n            </Table>\n\n            {\n                props.openState === true ? \n                (<div className=\"my-alert2\">\n                <p>\n                    지금 구매하시면 신규할인 20%\n                    <button className=\"close\" onClick={closeAlert}>\n                        <span aria-hidden = 'true'>&times;</span>\n                    </button>\n                </p>\n                </div>) : null\n            }\n\n        </div>\n    )\n}\n\n// redux를 이용해서 전체범위의 state를 셋팅해줘야한다\n// >> index.js에서 createstore로 이용해서 만든 state데이터를 셋팅\n// redux store안에 있던 데이터들을 가져오는 역할의 함수\n// props로 변환해주는 함수이다 / state를 props화\nfunction data (state){\n    // object를 리턴\n    return {\n        // store데이터를 Props로 등록하는 법\n        // name : state[0].name\n        // 또는 이런식으로도 가능하다\n        // (store안에 있던 데이터들을 전부 state라는 이름의 Props로 바꿔주세요)\n        // state : state\n        // 위에꺼는 1개의 Object만일때\n        // 만약 2개 이상은?\n        state : state.reducer,\n        openState : state.reducer2\n\n    }\n}\n\n// redux를 사용하는 라이브러리 사용법 >> 나중에 배운다\nexport default connect(data)(Cart);\n\n// export default Cart;","import React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nfunction Watched(data) {\n    let arr = localStorage.getItem('watched');\n    let history = useHistory();\n    if(arr === null){\n        arr = [];\n        return (\n            <div className=\"watched\">\n                <div className=\"noWatched\">\n                    본 게시물이 없습니다.\n                </div>\n            </div>\n        )\n    } else {\n        arr = JSON.parse(arr);\n        let shoes = data.shoes;\n\n        return (\n            <div className=\"watched\">\n                {\n                    arr.map((item, index)=>{\n                        let imgNum = parseInt(item);\n                        return(\n                            <div onClick={()=>{history.push('/detail/' + item)}}>\n                                <img className=\"watchedImg\" src={\"http://codingapple1.github.io/shop/shoes\" + (imgNum+1) + \".jpg\"}></img>\n                                <p>{shoes[item].title}</p>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Watched;","/* enlint-disable */\n\nimport React,{useState, useContext, lazy, Suspense} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, NavDropdown, Button, Jumbotron } from 'react-bootstrap';\nimport shoesData from './shoesData.js'; // ./경로 >> ./은 현재경로라는 뜻\n// 만약 보낸 변수가 많다면 가져오는 Js에서 지정한 export [ {변수1, 변수2} ] >> 이걸 그대로 써줘야한다\n// 페이지 라우팅하기 1단계\nimport { Link, Route, Switch } from 'react-router-dom';\n\n// ajax를 사용하기 위한 axios라이브러리 다운 받은 후 import\nimport axios from 'axios';\nimport Cart from './Cart.js';\n\nimport Watched from './Watched.js';\n\n// import DetailPage from './Detail.js';\n// lazy사용하기\nlet DetailPage = lazy(()=>{ return import('./Detail.js')});\n\n// context만들기\n// 만약 다른 파일에서도 사용하고 싶으면? >> 앞에 export를 사용하기\nexport let stockContext = React.createContext();\n\nfunction App() {\n\n  // 데이터 바인딩 하기\n  // 중요한 데이터들은 App컴포넌트(부모컴포넌트)에 지정해주고 pros로 보내주는 것이 좋다 or redux파일에 보관\n  let [shoes, setshoes] = useState(shoesData);\n\n  // 재고 데이터\n  let [stock, setStock] = useState([10, 20, 15]);\n\n  return (\n    <div className=\"App\">\n      {/* 상단바 */}\n      <Navbar bg=\"light\" expand=\"lg\" className=\"navBar\">\n        <Navbar.Brand><Link to=\"/\">Shopping_Mall</Link></Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            {/* 라우터라이브러리인 라우터안에 Link태그를 이용해서 페이지 이동하게 만들기 */}\n            {/* to속성 >> 경로를 지정해준다 */}\n            {/* Link태그처럼 사용해 주세요 >> as={Link} */}\n            <Nav.Link as={Link} to=\"/\">HOME</Nav.Link>\n            <Nav.Link as={Link} to=\"/cart\">CART</Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* 대문만들기 */}\n      <Jumbotron className=\"main\">\n        <h1>2021 New Collection</h1>\n        <p>\n          This is a simple hero unit, a simple jumbotron-style component for calling\n          extra attention to featured content or information.\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn more</Button>\n        </p>\n      </Jumbotron>\n\n      {/* \n        라우팅 2단계 >> 즉, 라우트태그를 이용해서 보여지는 페이지를 나눠주는 방식이다 \n        나는 detail만 보고싶은데 메인페이지가 보이는 이유?\n        맨 처음 Path에 적힌 /는 모든 path에 /가 있으면 들어가게 된다\n        이것을 주어진 경로와 정확히 맞는 Route만 보여주기\n        >> exact\n        매칭되는 첫번째 Route만 보여주기\n        >> Switch\n        여기서 exact는 중복으로 Route가 보여질 수 있다 >> 경로가 정확히 맞는것만 보여주기때문에 중복가능\n        but Switch는 매칭되는 첫!번!째!만 보여지기 때문에 한개의 Route만 보여진다\n      */}\n\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Watched shoes={shoes}/>\n          {/* 상품진열 */}\n          {/* 컴포넌트화 해도 된다 */}\n          <div className=\"container\">\n\n            <stockContext.Provider value={stock}>\n\n            <div className=\"row\">\n              {/* \n                className이 container와 row는 부트스트랩 문법이다 \n                row >> 12개의 컬럼(세로로)으로 쪼개겠다라는 뜻 \n                acontainer >> 좌우여백을 알맞게 맞추겠다라는 뜻\n                col-md-4 >> 4컬럼씩 차지하는 div를 만들겠다(+md는 모바일에서 세로로 정렬이 가능함)\n              */}\n              {/* <div className=\"col-md-4\">\n                <img src=\"http://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\"/>\n                <h4>{shoes[0].title}</h4>\n                <p>{shoes[0].content}</p>\n                <p>{shoes[0].price}</p>\n              </div> */}\n              {\n                shoes.map(function(info, index){\n                  return (\n                    <ShoesInfo shoes={info} i={index+1} key={index}/>\n                  )\n                })\n              }\n            </div>\n\n            </stockContext.Provider>\n            \n            {/* ajax를 이용하여 데이터 더 가져오기 */}\n            <button className=\"btn btn-primary\" onClick={() => {\n              // 서버한테 get요청을 함(ajax사용)\n              // 참고로 지금 받아온 것은 object가 아닌 따옴표가 있는 Json\n\n              \n              // 1. axios이용\n              // axios.get('url')\n              // .then(콜백함수) >> ajax가 서버요청에 성공을 하면 실행하는 코드($.ajax에서 success와 같은 방식)\n              // .catch(콜백함수) >> 요청실패(error)\n              // axios는 json을 자동적으로 object로 변환하여 출력해 준다\n              axios.get('https://codingapple1.github.io/shop/data2.json')\n              .then((data)=>{\n                // 내가 알던 ajax와 같게 매개변수로 data를 받아오면서 그값을 이용해서 제작하면 된다.\n                // 파라미터는 ajax요청을 하고 나서의 성공결과 모든것(왜성공했는지 까지)을 담고 있다\n                // 내가 받아오는 값만 출력하고싶으면? >> 파라미터명.data를 하면 받아오는 값만 출력이 가능\n                \n                // 더보기 클릭하면 더 나오게 하기\n                // 방법1\n                // let newShoes = [...shoes];\n                // for(let i = 0; i < data.data.length; i++){\n                //   newShoes.push(data.data[i]);\n                // }\n\n                // 방법2\n                let newShoes = [...shoes, ...data.data];\n                // 대괄호를 벗기고 다시 대괄호 안에 넣는방법 >> ...변수명\n\n                setshoes(newShoes);\n\n              })\n              .catch(()=>{\n                console.log(\"실패\")\n              })\n\n              // 2. 쌩 자바스크립트를 이용한 ajax >> fetch\n              // axios와 유사하다 >> fetch(url).then(콜백함수).catch(콜백함수)\n              // fetch는 axios처럼 json을 자동적으로 object화 시켜주지 않는다\n              // fetch('https://codingapple1.github.io/shop/data2.json')\n              // .then((data)=>{\n              //   console.log(data);\n              // })\n              // .catch(()=>{\n\n              // })\n\n              // 3. 서버를 Post로 전송하는 법 >> axios.post('url', 전달 데이터);\n              // 요청시 header 설정도 가능하다\n\n\n            }}>더보기</button>\n          </div>\n        </Route>\n\n        {/* 디테일 페이지 */}\n        {/* <Route path=\"/detail\">\n          {/* <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\n              </div>\n              <div className=\"col-md-6 mt-4\">\n                <h4 className=\"pt-5\">상품명</h4>\n                <p>상품설명</p>\n                <p>120000원</p>\n                <button className=\"btn btn-danger\">주문하기</button> \n              </div>\n            </div>\n          </div>  */}\n          {/* 컴포넌트 따로 파일만들어서 불러오기\n          <DetailPage shoes={shoes}/>\n        </Route> */}\n        {/* 만약 route를 깔끔하게 컴포넌트로 보여주고싶다? */}\n        {/* <Route path=\"/detail2\" component={컴포넌트명}></Route> */}\n\n\n        {/* 각페이지에 여러개의 detail보여주기 */}\n        <Route path=\"/detail/:id\">\n          <Watched shoes={shoes}/>\n          {/* \n            path에 :id의 의미 \n            >> /모든문자 라는 경로를 의미한다(아무문자열을 적었을 때 이 컴포넌트를 보여주세요 라는 의미)\n            1. 콜론뒤에는 마음대로 작명\n            2. 여러개 사용가능(/:id/:id)\n          */}\n\n          {/* 재고변경 함수도 props로 보내는거 쌉가넝! */}\n          {/* 만약 Context를 detail에서도 사용하고 싶으면? \n            >> 간단하게 <context변수명.Provider>를 감싸주면 된다!\n          */}\n          <stockContext.Provider>\n            {/* fallback? detailPage컴포넌트를 로딩 전까지 띄울 html을 넣어준다 */}\n            <Suspense fallback={<div>로딩중이에요</div>}>\n              <DetailPage shoes={shoes} stock={stock} setStock={setStock}/>\n            </Suspense>\n          </stockContext.Provider>\n        </Route>\n\n        <Route path=\"/cart\">\n          <Cart></Cart>\n        </Route>\n\n        <Route path=\"/:id\"> \n          {/* path에 :id의 의미 >> /모든문자 라는 경로를 의미한다(아무문자열을 적었을 때 이 컴포넌트를 보여주세요 라는 의미) */}\n          <div>아무거나 호호호호</div>\n        </Route>\n\n      </Switch>\n\n    </div>\n  );\n}\n\nfunction ShoesInfo(data){\n\n  // 이미지 경로 가져오기\n  let imageRode = \"http://codingapple1.github.io/shop/shoes\" + data.i + \".jpg\";\n  // 부모 컴포넌트에서 context로 보낸 값을 사용하기 \n  // >> useContext훅을 사용해야한다(상단에 import로 useContext를 받아와야한다)\n  let stock = useContext(stockContext);\n\n  return (\n    <div className=\"col-md-4\">\n      <Link to={\"/detail/\"+ (data.i-1)}>\n      <img src={imageRode} width=\"100%\"/>\n      <h4>{data.shoes.title}</h4>\n      <p>{data.shoes.content}</p>\n      <p>{data.shoes.price}</p>\n      {/* \n        여기에 재고표시를 위한 컴포넌트가 하나 더 있고 재고데이터바인딩을 해야한다면?\n        >> 보통은 props를 이용해서 보낸다(data.재고데이터key이름)\n        이렇게 하면 귀찮기 때문에 문법하나를 이용하여 쉽게 사용한다\n        contextAPI >> 리액트의 내장문법\n        props를 사용하지 않아도 하위 컴포넌터들이 부모의 값을 사용가능하게 해준다(공유)\n\n        - context만들기 -\n        1. App컴포넌트 위에 React.createContext문법을 쓴다\n          >> createContext은 범위를 생성해주는 문법이다. >> 같은값을 공유할 범위\n        2. 변수에 문법을 저장한다 (ex. let 변수명 = React.creat블라)\n        3. 범위를 잘 기억한 후 같은 값을 공유할 html을 범위로 감싸맨다\n          >> 어디에 해도 상관없다 그저 감싸주기만 하면된다\n          사용방법은 <context변수명.Provider>여기 안에는 하위컴포넌트가 들어가 있으면 된다</context변수명.provider>\n          안에 속성으로는 value가 있는데 공유하고 싶은 값을 넣어주면된다 value = {공유를 원하는 변수명}\n        이런식으로 지정을 해주면 props로 따로 보내지 않아도 Provider안에서는 보낸 value를 사용할 수 있다\n        !주의! 여기서 value는 key이름이 아닌 속성명이다\n\n        여기서 보낸 value를 사용하려면 함수내 지역함수로 지정해줘야한다\n        >> useContext사용\n        ex) let 변수명 = useContext(만든context변수명)\n        useContext는 훅이기 때문에 import필수\n\n        간단한 데이터 전송은 props를 사용하는것이 좋다\n        하지만 밑에처럼 하위컴포넌트 안에 하위컴포넌트가 있으면?\n        >> 이경우에는 useContext를 사용하면된다\n        >> 이미 1차하위컴포넌트가 Provider안에 있기 때문에 2차하위컴포넌트도 들어가있는 셈이다\n        >> 대신 2차하위컴포넌트에서도 useContext를 지정해주어서 사용해야한다\n       */}\n       <Test index={data.i-1}></Test>\n      </Link>\n    </div>\n  )\n}\n\nfunction Test(data){\n\n  let stock = useContext(stockContext);\n\n  return <p>재고 : {stock[data.index]}</p>\n}\n\nexport default App;\n\n// React Router1\n// 라우팅이란? 페이지를 나누는 것을 이야기한다(주문페이지, 상세페이지 등등)\n// 리액트에서는 react-router-dom이라는 라이브러리를 이용한다 >> yarn add react-router-dom\n\n\n// 컴포넌트의 LifeCycle\n// >> 컴포넌트의 인생(컴포넌트는 어떻게 살다가 죽는 것인가?) \n// 컴포넌트 등장 -> 업데이트(재렌더링) -> 퇴장\n// 중간중간마다 훅을 걸 수 있다(낚시바늘 후크 생각하면 됨)\n// 컴포넌트가 생성되기 전에 훅을 걸 수 있다(요청) or 삭제되기전에 훅을 걸 수 있다.\n// 즉, Hook으로 컴포넌트의 인생 중간에 명령을 줄 수 있다.\n\n\n// useContext말고도 Redux라는 것이 있다(라이브러리)\n// Redux란?\n// 모든 컴포넌트 파일들이 같을 값을 공유할 수 있는 저장공간을 생성해준다(props 대신)\n// + state데이터 관리 기능도 있다\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n// 라우터 셋팅(from뒤에 ./가 없고 이름만있다? >> 라이브러리 이름이라고 보면 된다(설치한 라이브러리))\nimport {BrowserRouter} from 'react-router-dom';\n\n// redux셋팅하기\n// 1. Import Provider하기\n// store는 state의 보관통이라고 생각을 하면 된다\nimport {Provider} from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\n\n// state초기값\nlet defaultState = [\n  { id: 0, name : 'Good신발', quan : 2},\n  { id: 1, name : '멋진신발', quan : 3 }\n]\n\n// redux수정방법 정의(셋팅)! >> reducer함수를 정의\n// state초기 값도 원래는 이 함수에 넣어둬야한다\nfunction reducer(state = defaultState, action){\n  // reducer함수는 state값을 뱉어야 한다(항상)\n  // 그래야 reducer를 쓴 곳에 정상적으로 값이 나오게 된다\n  // 아무것도 변경이 되지않을때는 기본 state를 뱉게끔 하기 때문\n  // state = defaultState >> 이 문법은 default parameter문법이다(es6)\n  // 데이터 초기값을 넣는 방식이다\n\n  // 데이터 수정방법 미리정의하기\n  // 수정이 됐을 경우 modifyState가 수정이 안됐을 경우에는 state가 나가게끔 하기\n  // if문에는 수정되는 조건을 적어주면 된다\n  // >> action.type(데이터가 수정되는 조건)\n  // 이제 '증가'라는것은 수정버튼이 있는곳에서 onClick을 하면 증가가 여기로 오게끔 하면 된다\n  // 데이터 수정은 여기서 해주면 된다\n  // 값이 추가 될 때 state에 값을 추가하기\n  if( action.type === 'plusInfo' ){\n    // state안에 값을 찾아주는 함수 >> findIndex\n    // 이 함수는 조건이 true이면 몇번째에 그값이 있는지 return 해 준다\n    let indexNum = state.findIndex(function(a){\n      // a는 array안에 있는 하나하나의 데이터를 이야기 한다\n      return a.id === action.data.id\n    })\n\n    let modifyState = [...defaultState];\n\n    if(indexNum >= 0){\n      modifyState[indexNum].quan++;\n    } else {\n      modifyState.push(action.data)\n    }\n    \n    return modifyState;\n  } else if(action.type === '증가'){\n    // Cart에서 payload라는 키값으로 보낸 데이터를 받고싶을때는?\n    // action에 저장되어있기 때문에 거기서 받아쓰면된다\n    let modifyState = [...defaultState];\n    modifyState[action.number].quan++;\n    return modifyState\n  } else if(action.type === '감소') {\n    let modifyState = [...defaultState];\n    modifyState[action.number].quan--;\n    if(modifyState[action.number].quan <= 0){\n      modifyState[action.number].quan = 0;\n    }\n    return modifyState\n  } else {\n    return state;\n  }\n  \n\n}\n\n// 만약 reducer를 하나 더 만들어야한다면?\n// 하나 더 만들면 되지!?\n// state하나 더 만들기\nlet closeDefault = true;\n\nfunction reducer2 (state = closeDefault, action){\n  if(action.type === 'close'){\n    let modifyClose = false;\n    return modifyClose;\n  } else {\n    return closeDefault;\n  }\n}\n\n// 만든 reducer를 모두다 추가하는 방법\n// 원래 하나만 보낼때는? \n// let store = createStore(reducer);\n// 두개 이상 보낼때는? >> combineReducers  \nlet store = createStore(combineReducers({reducer, reducer2})); \n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/test_shoppingmall/\">\n    {/* BrowserRouter태그를 사용하게 되면 \n    >> /abc로 접속하면 A페이지를 보여주고 /def로 접속하면 B페이지를 보여주는 형식 \n    \n    두가지 방법이 있다\n    1. BrowserRouter >> #기호 없이 동작\n    2. HashRouter >> #기호를 이용해서 동작\n    HashRouter는 라우팅을 안전하게 할 수 있음 \n    >> 주소창은 서버에게 요청하는 것인데 주소창에 #/ 이 뒷부분은 서버에 절대 요청을 하지 않는것을 의미한다\n    BrowserRouter는 라우팅을 리액트가 아닌 서버에게 요청할 수 있어서 위험하다(페이지가 없다고 뜰 수도 있음)\n    즉, BrowserRouter는 서버가 있을 때 사용 / HashRouter는 서버가 없을 때 사용한다\n    만약 BrowserRouter를 서버 없이 사용할 때 사용하고 싶으면 서버라우팅방지를 하는 API를 작성해야함\n    */}\n    {/* \n      redux셋팅 2. App컴포넌트를 Provider로 감싸기\n      이렇게 감싸진애들을 props없이도 state공유가 가능하다\n      state는 index.js에 만들어도 된다\n      위에 만들어진 state를 props로 전송\n     */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// PWA란?\n// Progressive Web App\n// 구글에서 밀고있는 것으로 웹사이트를 안드로이드/ios모바일 앱처럼 사용할 수 있게 만든 일종의 웹개발 기술\n// 웹사이트를 모바일 앱으로 발행해서 쓸 수 있게하는것\n// 앱으로 발행하는게 아니라 웹사이트 자체를 스마트폰 홈화면에 설치를 하는 것\n// 1. 장점\n// 1) 스마트폰, 태블릿 바탕화면에 웹사이트를 설치 가능하게 한다\n// (상단에 Url이 없는 크롬 브라우저가 뜬다 >> 앱이랑 구별x)\n// 2) 오프라인에서도 동작가능 (service-worker.js)라는 파일과 브라우저의 Cache storage덕분에\n// >> 자바스크립트로 게임을 만들 때 유용하다\n// 3) 설치유도비용이 적다(최근에 쇼핑몰에서 사용을 많이 한다)\n\n// PWA화 하려면?\n// manifest.json과 service-worker.js가 필요하다\n// 2020.10.30일이후로 service-worker를 create-react-app을 제작할 때 만들어 주질않는다\n// 직접만들어도 된다...ㅠ\n// 혹은 npx create-react-app 프로젝트명 --template cra-template-pwa\n// 처음부터 프로젝트를 만들 때 저 명령어를 사용하면 된다\n"],"sourceRoot":""}