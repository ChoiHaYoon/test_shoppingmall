{"version":3,"sources":["shoesData.js","Detail.js","App.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","Boxing","styled","div","제목","h4","data","색상","StockInfo","stock","index","Detail","useState","alertYN","setAlert","test","setTest","useEffect","timemmer","setTimeout","console","log","clearTimeout","history","useHistory","useParams","findContent","shoes","find","cont","className","value","onChange","e","target","src","width","onClick","newStock","setStock","goBack","ShoesInfo","imageRode","i","to","App","shoesData","setshoes","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","as","NavDropdown","Item","href","Divider","Jumbotron","Button","variant","exact","path","map","info","axios","get","then","newShoes","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.4844f84f.chunk.js","sourcesContent":["// 기본은 export default\nexport default [\n    {  \n        id: 0,\n        title : \"white and Black\",\n        content : \"Born in France\",\n        price: 120000\n    },\n    {  \n        id: 1,\n        title : \"Red Knit\",\n        content : \"Born in Seoul\",\n        price: 110000\n    },\n    {  \n        id: 2,\n        title : \"Grey Yordan\",\n        content : \"Born in the States\",\n        price: 130000\n    }\n];\n\n// 하지만 내보낼 변수가 많다면? export { 변수명1, 변수명2 }","// 컴포넌트 파일을 만들때는 무조건 대문자로 시작\nimport React, { useEffect, useState } from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n// component가 많아지면 css작성이 고민이 많아짐(class이름을 중복으로 지정해놓는다거나...)\n// 그래서 class선없없이 컴포넌트에 css를 직접 장착하는 방법이 있다 >> css in js\nimport styled from 'styled-components';\nimport './Detail.scss';\n\n// 컴포넌트에 직접 스타일 넣어서 스타일링 하기\nlet Boxing = styled.div`\n    padding: 20px;\n`;\nlet 제목 = styled.h4`\n    font-size : 25px;\n    color : ${ data => data.색상 }\n`;\n// styled-components 유용한 문법 하나 더!\n// -> 만약 비슷한 ui가 몇개 더 필요할 경우? ${변수명} >> 을 사용해서 쓴다\n// 우리가 부모컴포넌트에서 자식컴포넌트로 props를 보내는 것처럼\n// key = {value} >> 이런식으로 보내고\n// 받을때는 변수명 => 변수명.key 로 받아오면 된다\n\n\n\n// 컴포넌트의 LifeCycle\n// >> 컴포넌트의 인생(컴포넌트는 어떻게 살다가 죽는 것인가?) \n// 컴포넌트 등장 -> 업데이트(재렌더링) -> 퇴장\n// 중간중간마다 훅을 걸 수 있다(낚시바늘 후크 생각하면 됨)\n// 컴포넌트가 생성되기 전에 훅을 걸 수 있다(요청) or 삭제되기전에 훅을 걸 수 있다.\n// 즉, Hook으로 컴포넌트의 인생 중간에 명령을 줄 수 있다.\n\n// // Lifecycle Hook의 몇개 / 원래는 class컴포넌트들만 사용가능\n// class Detail2 extends React.Component {\n//     // 자주사용하는 라이프사이클 훅\n//     // 1. detail2컴포넌트가 mount(등장)되었을 때 실행할 코드\n//     componentDidMount() {\n//         // detail2가 딱 보일때(렌더링 될 때) 이 안에 있는 코드들이 실행된다\n//         // 보통은 ajax를 이런곳에서 자주 사용한다.\n//     }\n\n//     // 2. detail2컴포넌트가 unmount(퇴장)되었을 때 실행할 코드\n//     componentWillUnmount() {\n//         // detail2가 사라질 때 이 안에 있는 코드들이 실행된다\n//     }\n// }\n\n// 하지만 react 16.~부터는 위에꺼보다 더 쉽게 작성이 가능하다\nfunction Detail(data) {\n    // 더쉽게 사용하는 hook >> useEffect\n    // 라이프 사이클과 같은 hook이다\n    // 하지만 더 자주 사용된다\n    // 1) 컴포넌트가 보일때(Mount) / 2) 컴포넌트가 update될 때\n    // 특정 코드를 실행 할 수 있음\n\n    // alert의 유무보여주기\n    let [alertYN, setAlert] = useState(true);\n    let [test, setTest] = useState('임시이다');\n\n    useEffect(() => {\n        // my-alert2창이 2초후에 사라지게 하기\n        // 몇초 후에 사라지게 하는 함수 >> setTimeout(()=>{}, 초수);\n        let timemmer = setTimeout(() => {\n            if(alertYN === true){\n                setAlert(false);\n                // setTimeout 쓸 때 주의점\n                // >> 지정한 초전에 뒤로가기로 하게 되면 값이 이상하게 들어갈 수 있다.\n                // >> 그렇기 때문에 Unmount될 때 타이머 해제를 시켜줘야한다\n            }\n        }, 2000);\n        // 위에꺼만 사용하게 되면 의도치 않은 버그가 생길 수 있다.(컴포넌트가 업데이트가 된다면 또 나타날 수 있다)\n        // 예를 들어 밑에있는 input에 값을 넣으면 useState값이 변경되기 때문에 재렌더링(Update)이 된다\n        // 만약 이 useEffect는 맨처음 detail로드 할때만 실행시키고 싶은데 여기서 더이상 작성을 하지 않으면 계속해서 렌더링이 되고있기때문에 잘못된 코드이다.\n        // 이럴 때 사용하는게 중괄호 다음에 , [실행조건]을 넣어줘서 사용을 하면된다\n        // 즉, 특정 state가 변경될때만 실행시켜달라는 조건을 넣는 것 이다.\n        console.log(\"useEffect가 계속 실행된다!!\") // useEffect가 실행되는지 보기위한 log\n\n        // 3) 컴포넌트가 사라질 때 코드를 실행 시킬 수 도 있음(unmount)\n        // return function 함수명 () { 실행할 코드 } >> 이 코드는 detail이라는 컴포넌트가 사라질 때 실행되는 코드라는 것을 이야기해줌\n        return function bye () {\n            console.log(\"지성빠이! 웅!\");\n            // 타이머 해제스킬쓰기 >> 타이머 제거하기\n            clearTimeout(timemmer);\n        }\n        // 4) 여러개를 사용하고 싶을때는?\n        // 하나의 useEffect안에 여러개를 써도 되지만 useEffect를 여러개 사용해도 좋다!\n        // 대신 순서대로 진행되기 때문에 순서에 주의하자!\n    }, []); // alertYN이 변경될 때만 실행이 되는 조건을 건것이다.(여러개 가능)\n                   // 조건을 안넣을 경우는? \n                   // >> 공허한 state가 변경이 되면 실행해 주세요 \n                   // >> 즉, detail 업데이트를 해도 실행이 안되는것\n                   // >> 페이지가 로드 됐을 때만 사용된다\n    \n    // 뒤로가기 함수쓰기\n    // useHistory와 useState는 Hook \n    // react-router-dom v5이상 / react v16.3이상에서만 사용가능\n    // 방문했던 모든 기록들을 저장해놓은 object라고 할 수 있다.\n    let history = useHistory();\n\n    // useParams >> 파라미터값을 저장해서 변수로 만들어 줄 수 있다.\n    let { id } = useParams(); \n    // 변수에 넣으면 object가 들어가게 된다 >> 사용자가 입력한 URL파라미터들이 들어가게된다\n    // 즉, /:id자리에 사용자가 입력한 값이 들어가게 되는 것이다.\n    let findContent = data.shoes.find(function(cont){\n        // cont.id와 같은 id의 shoes번호(shoes객체를 findContent에 반환한다)\n        return cont.id == id;\n    })\n\n    return(\n        <div className=\"container\">\n            {/*\n                위에서 styled를 이용해서 미리 css를 입힌 div가 생성되는 것 \n            */}\n            <Boxing>\n                {/* <제목 색상='black' >Detail</제목> */}\n                <제목 className=\"titleName\">Detail</제목>\n                {/* 여기서는 색상이 key값이 되는것이다(중괄호 안하고 따옴표만 해줘도 된다) */}\n            </Boxing>\n\n            <input value={test} onChange={(e) => {setTest(e.target.value);}} />\n            \n            {/* 알림창 */}\n            {\n                alertYN === true ? \n                ( <div className=\"my-alert2\">\n                    <p>재고가 얼마 남지 않았습니다.</p>\n                </div> ) \n                : null\n            }\n\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <img src={\"https://codingapple1.github.io/shop/shoes\" + (findContent.id+1) +\".jpg\"} width=\"100%\" />\n                </div>\n                <div className=\"col-md-6 mt-4\">\n                {/* \n                    여기서 data.shoes[:id자리에 있던 값] \n                    >> 안에 들어가는 변수는? useParams훅\n                */}\n                    <h4 className=\"pt-5\">{findContent.title}</h4>\n                    <p>{findContent.content}</p>\n                    <p>{findContent.price}</p>\n\n                    {/* 재고 데이터 컴포넌트 불러오기 */}\n                    <StockInfo stock={data.stock} index={findContent.id}></StockInfo>\n\n                    {/* onClick을 이용해서 재고데이터 수정하기(-1) */}\n                    {/* 재고데이터는 array이기 때문에 깊은복사를 하여서 복사본을 수정 후에 변경함수를 이용하여 바꿔줘야한다 \n                    >> 하지만 변경함수는? app.js에 있다\n                    >> props로 넘겨주면 된다! */}\n                    <button className=\"btn btn-danger\" onClick={()=>{ \n                        // 재고변경하기\n                        let newStock = [...data.stock];\n                        newStock[findContent.id] -= 1;\n                        data.setStock(newStock);\n                    }}>주문하기</button>\n                    &nbsp;\n                    {/* Link말고도 다음페이지로 이동하게 만들 수 있다. */}\n                    <button className=\"btn btn-danger\" onClick={() => {\n                        // useHistory 훅안에 goBack이라는 함수사용해서 뒤로가기\n                        history.goBack();\n                        // 특정경로로 이동도 가능하다\n                    //   history.push(\"/\"); >> push함수로 원하는 경로를 넣으면 그경로로 이동하게 해준다\n                    }}>뒤로가기</button> \n                </div>\n            </div>\n        </div> \n    )\n}\n\n\n// 재고 컴포넌트\nfunction StockInfo(data) {\n    return (\n        <p>재고 : {data.stock[data.index]}</p>\n    )\n}\n\nexport default Detail;","/* enlint-disable */\n\nimport React,{useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, NavDropdown, Button, Jumbotron } from 'react-bootstrap';\nimport shoesData from './shoesData.js'; // ./경로 >> ./은 현재경로라는 뜻\n// 만약 보낸 변수가 많다면 가져오는 Js에서 지정한 export [ {변수1, 변수2} ] >> 이걸 그대로 써줘야한다\n// 페이지 라우팅하기 1단계\nimport { Link, Route, Switch } from 'react-router-dom';\nimport DetailPage from './Detail.js';\n// ajax를 사용하기 위한 axios라이브러리 다운 받은 후 import\nimport axios from 'axios';\n\nfunction App() {\n\n  // 데이터 바인딩 하기\n  // 중요한 데이터들은 App컴포넌트(부모컴포넌트)에 지정해주고 pros로 보내주는 것이 좋다 or redux파일에 보관\n  let [shoes, setshoes] = useState(shoesData);\n\n  // 재고 데이터\n  let [stock, setStock] = useState([10, 20, 15]);\n\n  return (\n    <div className=\"App\">\n      {/* 상단바 */}\n      <Navbar bg=\"light\" expand=\"lg\" className=\"navBar\">\n        <Navbar.Brand >Shopping_Mall</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            {/* 라우터라이브러리인 라우터안에 Link태그를 이용해서 페이지 이동하게 만들기 */}\n            {/* to속성 >> 경로를 지정해준다 */}\n            {/* Link태그처럼 사용해 주세요 >> as={Link} */}\n            <Nav.Link as={Link} to=\"/\">HOME</Nav.Link>\n            <Nav.Link as={Link} to=\"/detail\">DETAIL</Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* 대문만들기 */}\n      <Jumbotron className=\"main\">\n        <h1>2021 New Collection</h1>\n        <p>\n          This is a simple hero unit, a simple jumbotron-style component for calling\n          extra attention to featured content or information.\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn more</Button>\n        </p>\n      </Jumbotron>\n\n      {/* \n        라우팅 2단계 >> 즉, 라우트태그를 이용해서 보여지는 페이지를 나눠주는 방식이다 \n        나는 detail만 보고싶은데 메인페이지가 보이는 이유?\n        맨 처음 Path에 적힌 /는 모든 path에 /가 있으면 들어가게 된다\n        이것을 주어진 경로와 정확히 맞는 Route만 보여주기\n        >> exact\n        매칭되는 첫번째 Route만 보여주기\n        >> Switch\n        여기서 exact는 중복으로 Route가 보여질 수 있다 >> 경로가 정확히 맞는것만 보여주기때문에 중복가능\n        but Switch는 매칭되는 첫!번!째!만 보여지기 때문에 한개의 Route만 보여진다\n      */}\n      <Switch>\n        <Route exact path=\"/\">\n          {/* 상품진열 */}\n          {/* 컴포넌트화 해도 된다 */}\n          <div className=\"container\">\n            <div className=\"row\">\n              {/* \n                className이 container와 row는 부트스트랩 문법이다 \n                row >> 12개의 컬럼(세로로)으로 쪼개겠다라는 뜻 \n                acontainer >> 좌우여백을 알맞게 맞추겠다라는 뜻\n                col-md-4 >> 4컬럼씩 차지하는 div를 만들겠다(+md는 모바일에서 세로로 정렬이 가능함)\n              */}\n              {/* <div className=\"col-md-4\">\n                <img src=\"http://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\"/>\n                <h4>{shoes[0].title}</h4>\n                <p>{shoes[0].content}</p>\n                <p>{shoes[0].price}</p>\n              </div> */}\n              {\n                shoes.map(function(info, index){\n                  return (\n                    <ShoesInfo shoes={info} i={index+1} key={index}/>\n                  )\n                })\n              }\n            </div>\n            {/* ajax를 이용하여 데이터 더 가져오기 */}\n            <button className=\"btn btn-primary\" onClick={() => {\n              // 서버한테 get요청을 함(ajax사용)\n              // 참고로 지금 받아온 것은 object가 아닌 따옴표가 있는 Json\n\n              \n              // 1. axios이용\n              // axios.get('url')\n              // .then(콜백함수) >> ajax가 서버요청에 성공을 하면 실행하는 코드($.ajax에서 success와 같은 방식)\n              // .catch(콜백함수) >> 요청실패(error)\n              // axios는 json을 자동적으로 object로 변환하여 출력해 준다\n              axios.get('https://codingapple1.github.io/shop/data2.json')\n              .then((data)=>{\n                // 내가 알던 ajax와 같게 매개변수로 data를 받아오면서 그값을 이용해서 제작하면 된다.\n                // 파라미터는 ajax요청을 하고 나서의 성공결과 모든것(왜성공했는지 까지)을 담고 있다\n                // 내가 받아오는 값만 출력하고싶으면? >> 파라미터명.data를 하면 받아오는 값만 출력이 가능\n                \n                // 더보기 클릭하면 더 나오게 하기\n                // 방법1\n                // let newShoes = [...shoes];\n                // for(let i = 0; i < data.data.length; i++){\n                //   newShoes.push(data.data[i]);\n                // }\n\n                // 방법2\n                let newShoes = [...shoes, ...data.data];\n                // 대괄호를 벗기고 다시 대괄호 안에 넣는방법 >> ...변수명\n\n                setshoes(newShoes);\n\n              })\n              .catch(()=>{\n                console.log(\"실패\")\n              })\n\n              // 2. 쌩 자바스크립트를 이용한 ajax >> fetch\n              // axios와 유사하다 >> fetch(url).then(콜백함수).catch(콜백함수)\n              // fetch는 axios처럼 json을 자동적으로 object화 시켜주지 않는다\n              // fetch('https://codingapple1.github.io/shop/data2.json')\n              // .then((data)=>{\n              //   console.log(data);\n              // })\n              // .catch(()=>{\n\n              // })\n\n              // 3. 서버를 Post로 전송하는 법 >> axios.post('url', 전달 데이터);\n              // 요청시 header 설정도 가능하다\n\n\n            }}>더보기</button>\n          </div>\n        </Route>\n\n        {/* 디테일 페이지 */}\n        {/* <Route path=\"/detail\">\n          {/* <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\n              </div>\n              <div className=\"col-md-6 mt-4\">\n                <h4 className=\"pt-5\">상품명</h4>\n                <p>상품설명</p>\n                <p>120000원</p>\n                <button className=\"btn btn-danger\">주문하기</button> \n              </div>\n            </div>\n          </div>  */}\n          {/* 컴포넌트 따로 파일만들어서 불러오기\n          <DetailPage shoes={shoes}/>\n        </Route> */}\n        {/* 만약 route를 깔끔하게 컴포넌트로 보여주고싶다? */}\n        {/* <Route path=\"/detail2\" component={컴포넌트명}></Route> */}\n\n\n        {/* 각페이지에 여러개의 detail보여주기 */}\n        <Route path=\"/detail/:id\">\n          {/* \n            path에 :id의 의미 \n            >> /모든문자 라는 경로를 의미한다(아무문자열을 적었을 때 이 컴포넌트를 보여주세요 라는 의미)\n            1. 콜론뒤에는 마음대로 작명\n            2. 여러개 사용가능(/:id/:id)\n          */}\n\n          {/* 재고변경 함수도 props로 보내는거 쌉가넝! */}\n          <DetailPage shoes={shoes} stock={stock} setStock={setStock}/>\n        </Route>\n\n        <Route path=\"/:id\"> \n          {/* path에 :id의 의미 >> /모든문자 라는 경로를 의미한다(아무문자열을 적었을 때 이 컴포넌트를 보여주세요 라는 의미) */}\n          <div>아무거나 호호호호</div>\n        </Route>\n      </Switch>\n\n    </div>\n  );\n}\n\nfunction ShoesInfo(data){\n\n  // 이미지 경로 가져오기\n  let imageRode = \"http://codingapple1.github.io/shop/shoes\" + data.i + \".jpg\";\n\n  return (\n    <div className=\"col-md-4\">\n      <Link to={\"/detail/\"+ (data.i-1)}>\n      <img src={imageRode} width=\"100%\"/>\n      <h4>{data.shoes.title}</h4>\n      <p>{data.shoes.content}</p>\n      <p>{data.shoes.price}</p>\n      </Link>\n    </div>\n  )\n}\n\nexport default App;\n\n// React Router1\n// 라우팅이란? 페이지를 나누는 것을 이야기한다(주문페이지, 상세페이지 등등)\n// 리액트에서는 react-router-dom이라는 라이브러리를 이용한다 >> yarn add react-router-dom\n\n\n// 컴포넌트의 LifeCycle\n// >> 컴포넌트의 인생(컴포넌트는 어떻게 살다가 죽는 것인가?) \n// 컴포넌트 등장 -> 업데이트(재렌더링) -> 퇴장\n// 중간중간마다 훅을 걸 수 있다(낚시바늘 후크 생각하면 됨)\n// 컴포넌트가 생성되기 전에 훅을 걸 수 있다(요청) or 삭제되기전에 훅을 걸 수 있다.\n// 즉, Hook으로 컴포넌트의 인생 중간에 명령을 줄 수 있다.\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// 라우터 셋팅(from뒤에 ./가 없고 이름만있다? >> 라이브러리 이름이라고 보면 된다(설치한 라이브러리))\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/haYoon\">\n    {/* BrowserRouter태그를 사용하게 되면 \n    >> /abc로 접속하면 A페이지를 보여주고 /def로 접속하면 B페이지를 보여주는 형식 \n    \n    두가지 방법이 있다\n    1. BrowserRouter >> #기호 없이 동작\n    2. HashRouter >> #기호를 이용해서 동작\n    HashRouter는 라우팅을 안전하게 할 수 있음 \n    >> 주소창은 서버에게 요청하는 것인데 주소창에 #/ 이 뒷부분은 서버에 절대 요청을 하지 않는것을 의미한다\n    BrowserRouter는 라우팅을 리액트가 아닌 서버에게 요청할 수 있어서 위험하다(페이지가 없다고 뜰 수도 있음)\n    즉, BrowserRouter는 서버가 있을 때 사용 / HashRouter는 서버가 없을 때 사용한다\n    만약 BrowserRouter를 서버 없이 사용할 때 사용하고 싶으면 서버라우팅방지를 하는 API를 작성해야함\n    */}\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}