{"version":3,"sources":["shoesData.js","Detail.js","Cart.js","App.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","Boxing","styled","div","제목","h4","data","색상","TabCon","useEffect","setSwitch","tabNumber","className","StockInfo","stock","index","connect","state","reducer","openState","reducer2","useState","alertYN","setAlert","useContext","stockContext","timemmer","setTimeout","console","log","clearTimeout","history","useHistory","useParams","findContent","shoes","find","cont","tabNum","setTab","tabSwitch","src","width","onClick","newStock","setStock","dispatch","type","name","quan","push","goBack","Nav","variant","defaultActiveKey","Item","Link","eventKey","CSSTransition","in","classNames","timeout","props","Table","striped","bordered","hover","map","item","i","number","React","createContext","ShoesInfo","imageRode","to","Test","App","shoesData","setshoes","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","as","NavDropdown","href","Divider","Jumbotron","Button","exact","path","Provider","value","info","axios","get","then","newShoes","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","closeDefault","store","createStore","combineReducers","action","indexNum","findIndex","a","modifyState","modifyClose","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.4237db2b.chunk.js","sourcesContent":["// 기본은 export default\nexport default [\n    {  \n        id: 0,\n        title : \"white and Black\",\n        content : \"Born in France\",\n        price: 120000\n    },\n    {  \n        id: 1,\n        title : \"Red Knit\",\n        content : \"Born in Seoul\",\n        price: 110000\n    },\n    {  \n        id: 2,\n        title : \"Grey Yordan\",\n        content : \"Born in the States\",\n        price: 130000\n    }\n];\n\n// 하지만 내보낼 변수가 많다면? export { 변수명1, 변수명2 }","// 컴포넌트 파일을 만들때는 무조건 대문자로 시작\nimport React, { useContext, useEffect, useState } from 'react';\n// react Bootstrap\nimport { Navbar, Nav} from 'react-bootstrap';\nimport {useHistory, useParams} from 'react-router-dom';\n// component가 많아지면 css작성이 고민이 많아짐(class이름을 중복으로 지정해놓는다거나...)\n// 그래서 class선없없이 컴포넌트에 css를 직접 장착하는 방법이 있다 >> css in js\nimport styled from 'styled-components';\nimport './Detail.scss';\n\n// react-transition-group >> 컴포넌트의 등장/업데이트시 transition을 쉽게 줄 수 있음\nimport {CSSTransition} from 'react-transition-group'; \n\n// 다른 파일에서 context를 받아오면 무조건 export와 import를 해와야한다\nimport {stockContext} from './App.js';\n\n// redux사용하기\nimport { connect } from 'react-redux';\n\n// 컴포넌트에 직접 스타일 넣어서 스타일링 하기\nlet Boxing = styled.div`\n    padding: 20px;\n`;\nlet 제목 = styled.h4`\n    font-size : 25px;\n    color : ${ data => data.색상 }\n`;\n// styled-components 유용한 문법 하나 더!\n// -> 만약 비슷한 ui가 몇개 더 필요할 경우? ${변수명} >> 을 사용해서 쓴다\n// 우리가 부모컴포넌트에서 자식컴포넌트로 props를 보내는 것처럼\n// key = {value} >> 이런식으로 보내고\n// 받을때는 변수명 => 변수명.key 로 받아오면 된다\n\n\n\n// 컴포넌트의 LifeCycle\n// >> 컴포넌트의 인생(컴포넌트는 어떻게 살다가 죽는 것인가?) \n// 컴포넌트 등장 -> 업데이트(재렌더링) -> 퇴장\n// 중간중간마다 훅을 걸 수 있다(낚시바늘 후크 생각하면 됨)\n// 컴포넌트가 생성되기 전에 훅을 걸 수 있다(요청) or 삭제되기전에 훅을 걸 수 있다.\n// 즉, Hook으로 컴포넌트의 인생 중간에 명령을 줄 수 있다.\n\n// // Lifecycle Hook의 몇개 / 원래는 class컴포넌트들만 사용가능\n// class Detail2 extends React.Component {\n//     // 자주사용하는 라이프사이클 훅\n//     // 1. detail2컴포넌트가 mount(등장)되었을 때 실행할 코드\n//     componentDidMount() {\n//         // detail2가 딱 보일때(렌더링 될 때) 이 안에 있는 코드들이 실행된다\n//         // 보통은 ajax를 이런곳에서 자주 사용한다.\n//     }\n\n//     // 2. detail2컴포넌트가 unmount(퇴장)되었을 때 실행할 코드\n//     componentWillUnmount() {\n//         // detail2가 사라질 때 이 안에 있는 코드들이 실행된다\n//     }\n// }\n\n\n// 하지만 react 16.~부터는 위에꺼보다 더 쉽게 작성이 가능하다\nfunction Detail(data) {\n    // 더쉽게 사용하는 hook >> useEffect\n    // 라이프 사이클과 같은 hook이다\n    // 하지만 더 자주 사용된다\n    // 1) 컴포넌트가 보일때(Mount) / 2) 컴포넌트가 update될 때\n    // 특정 코드를 실행 할 수 있음\n\n    // alert의 유무보여주기\n    let [alertYN, setAlert] = useState(true);\n    let [test, setTest] = useState('임시이다');\n\n    // context받아오기\n    // 사용방법은 같다\n    let stock = useContext(stockContext);\n\n    useEffect(() => {\n        // my-alert2창이 2초후에 사라지게 하기\n        // 몇초 후에 사라지게 하는 함수 >> setTimeout(()=>{}, 초수);\n        let timemmer = setTimeout(() => {\n            if(alertYN === true){\n                setAlert(false);\n                // setTimeout 쓸 때 주의점\n                // >> 지정한 초전에 뒤로가기로 하게 되면 값이 이상하게 들어갈 수 있다.\n                // >> 그렇기 때문에 Unmount될 때 타이머 해제를 시켜줘야한다\n            }\n        }, 2000);\n        // 위에꺼만 사용하게 되면 의도치 않은 버그가 생길 수 있다.(컴포넌트가 업데이트가 된다면 또 나타날 수 있다)\n        // 예를 들어 밑에있는 input에 값을 넣으면 useState값이 변경되기 때문에 재렌더링(Update)이 된다\n        // 만약 이 useEffect는 맨처음 detail로드 할때만 실행시키고 싶은데 여기서 더이상 작성을 하지 않으면 계속해서 렌더링이 되고있기때문에 잘못된 코드이다.\n        // 이럴 때 사용하는게 중괄호 다음에 , [실행조건]을 넣어줘서 사용을 하면된다\n        // 즉, 특정 state가 변경될때만 실행시켜달라는 조건을 넣는 것 이다.\n        console.log(\"useEffect가 계속 실행된다!!\") // useEffect가 실행되는지 보기위한 log\n\n        // 3) 컴포넌트가 사라질 때 코드를 실행 시킬 수 도 있음(unmount)\n        // return function 함수명 () { 실행할 코드 } >> 이 코드는 detail이라는 컴포넌트가 사라질 때 실행되는 코드라는 것을 이야기해줌\n        return function bye () {\n            console.log(\"지성빠이! 웅!\");\n            // 타이머 해제스킬쓰기 >> 타이머 제거하기\n            clearTimeout(timemmer);\n        }\n        // 4) 여러개를 사용하고 싶을때는?\n        // 하나의 useEffect안에 여러개를 써도 되지만 useEffect를 여러개 사용해도 좋다!\n        // 대신 순서대로 진행되기 때문에 순서에 주의하자!\n    }, []); // alertYN이 변경될 때만 실행이 되는 조건을 건것이다.(여러개 가능)\n                   // 조건을 안넣을 경우는? \n                   // >> 공허한 state가 변경이 되면 실행해 주세요 \n                   // >> 즉, detail 업데이트를 해도 실행이 안되는것\n                   // >> 페이지가 로드 됐을 때만 사용된다\n    \n    // 뒤로가기 함수쓰기\n    // useHistory와 useState는 Hook \n    // react-router-dom v5이상 / react v16.3이상에서만 사용가능\n    // 방문했던 모든 기록들을 저장해놓은 object라고 할 수 있다.\n    let history = useHistory();\n\n    // useParams >> 파라미터값을 저장해서 변수로 만들어 줄 수 있다.\n    let { id } = useParams(); \n    // 변수에 넣으면 object가 들어가게 된다 >> 사용자가 입력한 URL파라미터들이 들어가게된다\n    // 즉, /:id자리에 사용자가 입력한 값이 들어가게 되는 것이다.\n    let findContent = data.shoes.find(function(cont){\n        // cont.id와 같은 id의 shoes번호(shoes객체를 findContent에 반환한다)\n        return cont.id == id;\n    })\n\n    // 몇번째 tab을 눌렀는지 저장할 state만들기\n    let [tabNum, setTab] = useState(0);\n\n    // transition 스위치 상태변경\n    let [tabSwitch, setSwitch] = useState(false);\n\n\n    return(\n        <div className=\"container\">\n            {/*\n                위에서 styled를 이용해서 미리 css를 입힌 div가 생성되는 것 \n            */}\n            <Boxing>\n                {/* <제목 색상='black' >Detail</제목> */}\n                <제목 className=\"titleName\">Detail</제목>\n                {/* 여기서는 색상이 key값이 되는것이다(중괄호 안하고 따옴표만 해줘도 된다) */}\n            </Boxing>\n\n            {/* <input value={test} onChange={(e) => {setTest(e.target.value);}} /> */}\n            \n            {/* 알림창 */}\n            {\n                alertYN === true ? \n                ( <div className=\"my-alert2\">\n                    <p>재고가 얼마 남지 않았습니다.</p>\n                </div> ) \n                : null\n            }\n\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <img src={\"https://codingapple1.github.io/shop/shoes\" + (findContent.id+1) +\".jpg\"} width=\"100%\" />\n                </div>\n                <div className=\"col-md-6 mt-4\">\n                {/* \n                    여기서 data.shoes[:id자리에 있던 값] \n                    >> 안에 들어가는 변수는? useParams훅\n                */}\n                    <h4 className=\"pt-5\">{findContent.title}</h4>\n                    <p>{findContent.content}</p>\n                    <p>{findContent.price}</p>\n\n                    {/* 재고 데이터 컴포넌트 불러오기 */}\n                    <StockInfo stock={data.stock} index={findContent.id}></StockInfo>\n\n                    {/* onClick을 이용해서 재고데이터 수정하기(-1) */}\n                    {/* 재고데이터는 array이기 때문에 깊은복사를 하여서 복사본을 수정 후에 변경함수를 이용하여 바꿔줘야한다 \n                    >> 하지만 변경함수는? app.js에 있다\n                    >> props로 넘겨주면 된다! */}\n                    <button className=\"btn btn-danger\" onClick={()=>{ \n                        // 재고변경하기\n                        let newStock = [...data.stock];\n                        newStock[findContent.id] -= 1;\n                        data.setStock(newStock);\n                        // 버튼클릭 시 cart에 추가하기\n                        data.dispatch({type : 'plusInfo', data : {id : findContent.id, name : findContent.title, quan : 1}})\n                        // 원래 이상태로 끝내면 페이지 이동이되면서 redux도 리셋이 되기때문에 아무것도 나타나질 않는다\n                        history.push('/cart');\n                        // history.push(url)\n                        // 라우터 쓰는법 >> useHistory훅 >> 페이지 이동을 강제로 시켜준다\n                    }}>주문하기</button>\n                    &nbsp;\n                    {/* Link말고도 다음페이지로 이동하게 만들 수 있다. */}\n                    <button className=\"btn btn-danger\" onClick={() => {\n                        // useHistory 훅안에 goBack이라는 함수사용해서 뒤로가기\n                        history.goBack();\n                        // 특정경로로 이동도 가능하다\n                    //   history.push(\"/\"); >> push함수로 원하는 경로를 넣으면 그경로로 이동하게 해준다\n                    }}>뒤로가기</button> \n                </div>\n            </div>\n\n            {/* \n                탭기능 만들기 >> 예전에 만들었던 UI제작방법이랑같음(useState이용) \n                탭기능은 true false가 아닌 몇번째 버튼을 눌렀는지를 따지게 하기\n\n                부트스트랩을 이용\n                - evnetKey : 버튼들 마다 유니크한 값을 부여하는 것\n                - defaultactiveKey : 어떤 키값을 default(기본)으로 할것인지(방문시)\n\n                몇번째 버튼을 눌렀는지 저장할 state를 만들어줘야한다(eventKey값 저장)\n            */}\n            <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"tap-0\">\n                <Nav.Item>\n                    <Nav.Link eventKey=\"tap-0\" onClick={() => {setSwitch(false); setTab(0)}}>탭1</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"tap-1\" onClick={() => {setSwitch(false); setTab(1)}}>탭2</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"tap-2\" onClick={() => {setSwitch(false); setTab(2)}}>탭3</Nav.Link>\n                </Nav.Item>\n            </Nav>\n\n            {/* 삼항연산자는 3개이상은 못하기때문에 따로 컴포넌트를 사용하여서 해줘야한다 */}\n            <CSSTransition in={tabSwitch} classNames=\"wow\" timeout={500}>\n            <TabCon tabNumber={tabNum} setSwitch={setSwitch}/>\n            </CSSTransition>\n            {/* \n                애니메이션은 css로 똑같이 만들면 된다 + 또는 라이브러리 사용도 가능\n                >> yarn add / npm add react-transition-group  \n                >> 컴포넌트의 등장/업데이트시 transition을 쉽게 줄 수 있음\n                1. 애니메이션을 주고싶은곳에 <CSSTransition>을 감싸면 된다\n                * 속성들 *\n                - in : 애니메이션 동작 스위치(true일때만 애니메이션이 부여됨)\n                - classNames : 애니메이션 이름을 지정(className)\n                - timeout : 몇초동안 동작하는지 의미(fade out) >> 없으면 큰일남\n                2. 이렇게 하면 셋팅은 완료 >> 디자인을 클래스명대로 작성하면 된다(css)\n                3. 원할 때 스위치 켜기 >> 이것또한 state로 저장 해서 쓰기\n                4. useEffect를 이용해서 탭이 나올때 마다 true로 나오게하기\n                + 다른탭을은 false로 만들어줘야하기때문에 onClick에 setSwitch(false)도 해주기\n                >> setTab보다 먼저해줘야 이전탭의 내용이 사라지게 된다\n\n                다른 변경들도 많기때문에 react-transition-group라이브러리 이용법 검색해보기\n            */}\n\n        </div> \n    )\n}\n// 탭 컴포넌트\nfunction TabCon(data){\n\n    useEffect(() => {\n        data.setSwitch(true)\n    })\n\n    if(data.tabNumber === 0){\n        return <div className=\"tabBox\">11111</div>\n    } else if(data.tabNumber === 1){\n        return <div className=\"tabBox\">22222</div>\n    } else if(data.tabNumber === 2){\n        return <div className=\"tabBox\">33333</div>\n    }\n}\n\n\n// 재고 컴포넌트\nfunction StockInfo(data) {\n    return (\n        <p>재고 : {data.stock[data.index]}</p>\n    )\n}\n\n\n// redux 함수 지정\nfunction data (state) {\n    return {\n        state : state.reducer,\n        openState : state.reducer2\n    }\n}\n\nexport default connect(data)(Detail);","// 장바구니 페이지 만들기\nimport React, {useState, useEffect, useContext} from 'react';\nimport {Table} from 'react-bootstrap';\nimport { connect } from 'react-redux';\n\nfunction Cart(props){\n    let state = props.state;\n    // 밑에서 지정한 function에서 props화 시켜주었기 때문에 매개변수로 받아와야한다\n    return (\n        <div>\n            <Table striped bordered hover variant=\"dark\">\n                <tr>\n                    <th>#</th>\n                    <th>상품명</th>\n                    <th>수량</th>\n                    <th>변경</th>\n                </tr>\n                {\n                    state.map((item, i)=> {\n                        return (\n                            <tr key={i}>\n                                <td>{item.id}</td>\n                                <td>{item.name}</td>\n                                <td>{item.quan}</td>\n                                <td>\n                                    {/* \n                                        redux를 쓰는 이유 두번째\n                                        state 데이터 관리가능\n                                        - redux에선 state데이터의 수정방법을 미리 정의한다\n                                        \n                                        모든것을 셋팅 후 여기서 클릭을 하면 수정하게 하는방법은?\n                                        props명.dispatch() >> dispatch는 고정이기때문에 외워야한다\n                                        (데이터 수정요청)\n                                        dispatch({ type : 원하는 값을 입력 })\n                                        >> 여기서는 버튼 클릭 시 증가라는 값이 입력이 되어 \n                                        reduxer에 있는 action.type에 증가라는 값이 입력이 되게끔했다\n\n                                        만약 데이터를 보내고 싶을때는 payload : 보낼데이터 \n                                        >> 이런식으로 데이터를 보낼 수 있다\n                                        reduc store에 같이 보내진다\n                                    */}\n                                    <button onClick={()=>{\n                                        props.dispatch({ type: '증가' , number : item.id })\n                                    }}>+</button>\n                                    <button onClick={()=>{\n                                        props.dispatch({ type: '감소', number : item.id })\n                                    }}>-</button>\n                                </td>\n                                \n                            </tr>\n                        )\n                    })\n                }\n            </Table>\n\n            {\n                props.openState === true ? \n                (<div className=\"my-alert2\">\n                <p>지금 구매하시면 신규할인 20%</p>\n                <button onClick={()=>{\n                    props.dispatch({ type : 'close' })\n                }}>닫기</button>\n                </div>) : null\n            }\n\n        </div>\n    )\n}\n\n// redux를 이용해서 전체범위의 state를 셋팅해줘야한다\n// >> index.js에서 createstore로 이용해서 만든 state데이터를 셋팅\n// redux store안에 있던 데이터들을 가져오는 역할의 함수\n// props로 변환해주는 함수이다 / state를 props화\nfunction data (state){\n    // object를 리턴\n    return {\n        // store데이터를 Props로 등록하는 법\n        // name : state[0].name\n        // 또는 이런식으로도 가능하다\n        // (store안에 있던 데이터들을 전부 state라는 이름의 Props로 바꿔주세요)\n        // state : state\n        // 위에꺼는 1개의 Object만일때\n        // 만약 2개 이상은?\n        state : state.reducer,\n        openState : state.reducer2\n\n    }\n}\n\n// redux를 사용하는 라이브러리 사용법 >> 나중에 배운다\nexport default connect(data)(Cart);\n\n// export default Cart;","/* enlint-disable */\n\nimport React,{useState, useContext} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, NavDropdown, Button, Jumbotron } from 'react-bootstrap';\nimport shoesData from './shoesData.js'; // ./경로 >> ./은 현재경로라는 뜻\n// 만약 보낸 변수가 많다면 가져오는 Js에서 지정한 export [ {변수1, 변수2} ] >> 이걸 그대로 써줘야한다\n// 페이지 라우팅하기 1단계\nimport { Link, Route, Switch } from 'react-router-dom';\nimport DetailPage from './Detail.js';\n// ajax를 사용하기 위한 axios라이브러리 다운 받은 후 import\nimport axios from 'axios';\nimport Cart from './Cart.js';\n\n// context만들기\n// 만약 다른 파일에서도 사용하고 싶으면? >> 앞에 export를 사용하기\nexport let stockContext = React.createContext();\n\nfunction App() {\n\n  // 데이터 바인딩 하기\n  // 중요한 데이터들은 App컴포넌트(부모컴포넌트)에 지정해주고 pros로 보내주는 것이 좋다 or redux파일에 보관\n  let [shoes, setshoes] = useState(shoesData);\n\n  // 재고 데이터\n  let [stock, setStock] = useState([10, 20, 15]);\n\n  return (\n    <div className=\"App\">\n      {/* 상단바 */}\n      <Navbar bg=\"light\" expand=\"lg\" className=\"navBar\">\n        <Navbar.Brand >Shopping_Mall</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            {/* 라우터라이브러리인 라우터안에 Link태그를 이용해서 페이지 이동하게 만들기 */}\n            {/* to속성 >> 경로를 지정해준다 */}\n            {/* Link태그처럼 사용해 주세요 >> as={Link} */}\n            <Nav.Link as={Link} to=\"/\">HOME</Nav.Link>\n            <Nav.Link as={Link} to=\"/detail\">DETAIL</Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* 대문만들기 */}\n      <Jumbotron className=\"main\">\n        <h1>2021 New Collection</h1>\n        <p>\n          This is a simple hero unit, a simple jumbotron-style component for calling\n          extra attention to featured content or information.\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn more</Button>\n        </p>\n      </Jumbotron>\n\n      {/* \n        라우팅 2단계 >> 즉, 라우트태그를 이용해서 보여지는 페이지를 나눠주는 방식이다 \n        나는 detail만 보고싶은데 메인페이지가 보이는 이유?\n        맨 처음 Path에 적힌 /는 모든 path에 /가 있으면 들어가게 된다\n        이것을 주어진 경로와 정확히 맞는 Route만 보여주기\n        >> exact\n        매칭되는 첫번째 Route만 보여주기\n        >> Switch\n        여기서 exact는 중복으로 Route가 보여질 수 있다 >> 경로가 정확히 맞는것만 보여주기때문에 중복가능\n        but Switch는 매칭되는 첫!번!째!만 보여지기 때문에 한개의 Route만 보여진다\n      */}\n      <Switch>\n        <Route exact path=\"/\">\n          {/* 상품진열 */}\n          {/* 컴포넌트화 해도 된다 */}\n          <div className=\"container\">\n\n            <stockContext.Provider value={stock}>\n\n            <div className=\"row\">\n              {/* \n                className이 container와 row는 부트스트랩 문법이다 \n                row >> 12개의 컬럼(세로로)으로 쪼개겠다라는 뜻 \n                acontainer >> 좌우여백을 알맞게 맞추겠다라는 뜻\n                col-md-4 >> 4컬럼씩 차지하는 div를 만들겠다(+md는 모바일에서 세로로 정렬이 가능함)\n              */}\n              {/* <div className=\"col-md-4\">\n                <img src=\"http://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\"/>\n                <h4>{shoes[0].title}</h4>\n                <p>{shoes[0].content}</p>\n                <p>{shoes[0].price}</p>\n              </div> */}\n              {\n                shoes.map(function(info, index){\n                  return (\n                    <ShoesInfo shoes={info} i={index+1} key={index}/>\n                  )\n                })\n              }\n            </div>\n\n            </stockContext.Provider>\n            \n            {/* ajax를 이용하여 데이터 더 가져오기 */}\n            <button className=\"btn btn-primary\" onClick={() => {\n              // 서버한테 get요청을 함(ajax사용)\n              // 참고로 지금 받아온 것은 object가 아닌 따옴표가 있는 Json\n\n              \n              // 1. axios이용\n              // axios.get('url')\n              // .then(콜백함수) >> ajax가 서버요청에 성공을 하면 실행하는 코드($.ajax에서 success와 같은 방식)\n              // .catch(콜백함수) >> 요청실패(error)\n              // axios는 json을 자동적으로 object로 변환하여 출력해 준다\n              axios.get('https://codingapple1.github.io/shop/data2.json')\n              .then((data)=>{\n                // 내가 알던 ajax와 같게 매개변수로 data를 받아오면서 그값을 이용해서 제작하면 된다.\n                // 파라미터는 ajax요청을 하고 나서의 성공결과 모든것(왜성공했는지 까지)을 담고 있다\n                // 내가 받아오는 값만 출력하고싶으면? >> 파라미터명.data를 하면 받아오는 값만 출력이 가능\n                \n                // 더보기 클릭하면 더 나오게 하기\n                // 방법1\n                // let newShoes = [...shoes];\n                // for(let i = 0; i < data.data.length; i++){\n                //   newShoes.push(data.data[i]);\n                // }\n\n                // 방법2\n                let newShoes = [...shoes, ...data.data];\n                // 대괄호를 벗기고 다시 대괄호 안에 넣는방법 >> ...변수명\n\n                setshoes(newShoes);\n\n              })\n              .catch(()=>{\n                console.log(\"실패\")\n              })\n\n              // 2. 쌩 자바스크립트를 이용한 ajax >> fetch\n              // axios와 유사하다 >> fetch(url).then(콜백함수).catch(콜백함수)\n              // fetch는 axios처럼 json을 자동적으로 object화 시켜주지 않는다\n              // fetch('https://codingapple1.github.io/shop/data2.json')\n              // .then((data)=>{\n              //   console.log(data);\n              // })\n              // .catch(()=>{\n\n              // })\n\n              // 3. 서버를 Post로 전송하는 법 >> axios.post('url', 전달 데이터);\n              // 요청시 header 설정도 가능하다\n\n\n            }}>더보기</button>\n          </div>\n        </Route>\n\n        {/* 디테일 페이지 */}\n        {/* <Route path=\"/detail\">\n          {/* <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\n              </div>\n              <div className=\"col-md-6 mt-4\">\n                <h4 className=\"pt-5\">상품명</h4>\n                <p>상품설명</p>\n                <p>120000원</p>\n                <button className=\"btn btn-danger\">주문하기</button> \n              </div>\n            </div>\n          </div>  */}\n          {/* 컴포넌트 따로 파일만들어서 불러오기\n          <DetailPage shoes={shoes}/>\n        </Route> */}\n        {/* 만약 route를 깔끔하게 컴포넌트로 보여주고싶다? */}\n        {/* <Route path=\"/detail2\" component={컴포넌트명}></Route> */}\n\n\n        {/* 각페이지에 여러개의 detail보여주기 */}\n        <Route path=\"/detail/:id\">\n          {/* \n            path에 :id의 의미 \n            >> /모든문자 라는 경로를 의미한다(아무문자열을 적었을 때 이 컴포넌트를 보여주세요 라는 의미)\n            1. 콜론뒤에는 마음대로 작명\n            2. 여러개 사용가능(/:id/:id)\n          */}\n\n          {/* 재고변경 함수도 props로 보내는거 쌉가넝! */}\n          {/* 만약 Context를 detail에서도 사용하고 싶으면? \n            >> 간단하게 <context변수명.Provider>를 감싸주면 된다!\n          */}\n          <stockContext.Provider>\n          <DetailPage shoes={shoes} stock={stock} setStock={setStock}/>\n          </stockContext.Provider>\n        </Route>\n\n        <Route path=\"/cart\">\n          <Cart></Cart>\n        </Route>\n\n        <Route path=\"/:id\"> \n          {/* path에 :id의 의미 >> /모든문자 라는 경로를 의미한다(아무문자열을 적었을 때 이 컴포넌트를 보여주세요 라는 의미) */}\n          <div>아무거나 호호호호</div>\n        </Route>\n\n      </Switch>\n\n    </div>\n  );\n}\n\nfunction ShoesInfo(data){\n\n  // 이미지 경로 가져오기\n  let imageRode = \"http://codingapple1.github.io/shop/shoes\" + data.i + \".jpg\";\n  // 부모 컴포넌트에서 context로 보낸 값을 사용하기 \n  // >> useContext훅을 사용해야한다(상단에 import로 useContext를 받아와야한다)\n  let stock = useContext(stockContext);\n\n  return (\n    <div className=\"col-md-4\">\n      <Link to={\"/detail/\"+ (data.i-1)}>\n      <img src={imageRode} width=\"100%\"/>\n      <h4>{data.shoes.title}</h4>\n      <p>{data.shoes.content}</p>\n      <p>{data.shoes.price}</p>\n      {/* \n        여기에 재고표시를 위한 컴포넌트가 하나 더 있고 재고데이터바인딩을 해야한다면?\n        >> 보통은 props를 이용해서 보낸다(data.재고데이터key이름)\n        이렇게 하면 귀찮기 때문에 문법하나를 이용하여 쉽게 사용한다\n        contextAPI >> 리액트의 내장문법\n        props를 사용하지 않아도 하위 컴포넌터들이 부모의 값을 사용가능하게 해준다(공유)\n\n        - context만들기 -\n        1. App컴포넌트 위에 React.createContext문법을 쓴다\n          >> createContext은 범위를 생성해주는 문법이다. >> 같은값을 공유할 범위\n        2. 변수에 문법을 저장한다 (ex. let 변수명 = React.creat블라)\n        3. 범위를 잘 기억한 후 같은 값을 공유할 html을 범위로 감싸맨다\n          >> 어디에 해도 상관없다 그저 감싸주기만 하면된다\n          사용방법은 <context변수명.Provider>여기 안에는 하위컴포넌트가 들어가 있으면 된다</context변수명.provider>\n          안에 속성으로는 value가 있는데 공유하고 싶은 값을 넣어주면된다 value = {공유를 원하는 변수명}\n        이런식으로 지정을 해주면 props로 따로 보내지 않아도 Provider안에서는 보낸 value를 사용할 수 있다\n        !주의! 여기서 value는 key이름이 아닌 속성명이다\n\n        여기서 보낸 value를 사용하려면 함수내 지역함수로 지정해줘야한다\n        >> useContext사용\n        ex) let 변수명 = useContext(만든context변수명)\n        useContext는 훅이기 때문에 import필수\n\n        간단한 데이터 전송은 props를 사용하는것이 좋다\n        하지만 밑에처럼 하위컴포넌트 안에 하위컴포넌트가 있으면?\n        >> 이경우에는 useContext를 사용하면된다\n        >> 이미 1차하위컴포넌트가 Provider안에 있기 때문에 2차하위컴포넌트도 들어가있는 셈이다\n        >> 대신 2차하위컴포넌트에서도 useContext를 지정해주어서 사용해야한다\n       */}\n       <Test index={data.i-1}></Test>\n      </Link>\n    </div>\n  )\n}\n\nfunction Test(data){\n\n  let stock = useContext(stockContext);\n\n  return <p>재고 : {stock[data.index]}</p>\n}\n\nexport default App;\n\n// React Router1\n// 라우팅이란? 페이지를 나누는 것을 이야기한다(주문페이지, 상세페이지 등등)\n// 리액트에서는 react-router-dom이라는 라이브러리를 이용한다 >> yarn add react-router-dom\n\n\n// 컴포넌트의 LifeCycle\n// >> 컴포넌트의 인생(컴포넌트는 어떻게 살다가 죽는 것인가?) \n// 컴포넌트 등장 -> 업데이트(재렌더링) -> 퇴장\n// 중간중간마다 훅을 걸 수 있다(낚시바늘 후크 생각하면 됨)\n// 컴포넌트가 생성되기 전에 훅을 걸 수 있다(요청) or 삭제되기전에 훅을 걸 수 있다.\n// 즉, Hook으로 컴포넌트의 인생 중간에 명령을 줄 수 있다.\n\n\n// useContext말고도 Redux라는 것이 있다(라이브러리)\n// Redux란?\n// 모든 컴포넌트 파일들이 같을 값을 공유할 수 있는 저장공간을 생성해준다(props 대신)\n// + state데이터 관리 기능도 있다\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// 라우터 셋팅(from뒤에 ./가 없고 이름만있다? >> 라이브러리 이름이라고 보면 된다(설치한 라이브러리))\nimport {BrowserRouter} from 'react-router-dom';\n\n// redux셋팅하기\n// 1. Import Provider하기\n// store는 state의 보관통이라고 생각을 하면 된다\nimport {Provider} from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\n\n// state초기값\nlet defaultState = [\n  { id: 0, name : 'Good신발', quan : 2},\n  { id: 1, name : '멋진신발', quan : 3 }\n]\n\n// redux수정방법 정의(셋팅)! >> reducer함수를 정의\n// state초기 값도 원래는 이 함수에 넣어둬야한다\nfunction reducer(state = defaultState, action){\n  // reducer함수는 state값을 뱉어야 한다(항상)\n  // 그래야 reducer를 쓴 곳에 정상적으로 값이 나오게 된다\n  // 아무것도 변경이 되지않을때는 기본 state를 뱉게끔 하기 때문\n  // state = defaultState >> 이 문법은 default parameter문법이다(es6)\n  // 데이터 초기값을 넣는 방식이다\n\n  // 데이터 수정방법 미리정의하기\n  // 수정이 됐을 경우 modifyState가 수정이 안됐을 경우에는 state가 나가게끔 하기\n  // if문에는 수정되는 조건을 적어주면 된다\n  // >> action.type(데이터가 수정되는 조건)\n  // 이제 '증가'라는것은 수정버튼이 있는곳에서 onClick을 하면 증가가 여기로 오게끔 하면 된다\n  // 데이터 수정은 여기서 해주면 된다\n  // 값이 추가 될 때 state에 값을 추가하기\n  if( action.type === 'plusInfo' ){\n    // state안에 값을 찾아주는 함수 >> findIndex\n    // 이 함수는 조건이 true이면 몇번째에 그값이 있는지 return 해 준다\n    let indexNum = state.findIndex(function(a){\n      // a는 array안에 있는 하나하나의 데이터를 이야기 한다\n      return a.id === action.data.id\n    })\n\n    let modifyState = [...defaultState];\n\n    if(indexNum >= 0){\n      modifyState[indexNum].quan++;\n    } else {\n      modifyState.push(action.data)\n    }\n    \n    return modifyState;\n  } else if(action.type === '증가'){\n    // Cart에서 payload라는 키값으로 보낸 데이터를 받고싶을때는?\n    // action에 저장되어있기 때문에 거기서 받아쓰면된다\n    let modifyState = [...defaultState];\n    modifyState[action.number].quan++;\n    return modifyState\n  } else if(action.type === '감소') {\n    let modifyState = [...defaultState];\n    modifyState[action.number].quan--;\n    if(modifyState[action.number].quan <= 0){\n      modifyState[action.number].quan = 0;\n    }\n    return modifyState\n  } else {\n    return state;\n  }\n  \n\n}\n\n// 만약 reducer를 하나 더 만들어야한다면?\n// 하나 더 만들면 되지!?\n// state하나 더 만들기\nlet closeDefault = true;\n\nfunction reducer2 (state = closeDefault, action){\n  if(action.type === 'close'){\n    let modifyClose = false;\n    return modifyClose;\n  } else {\n    return closeDefault;\n  }\n}\n\n// 만든 reducer를 모두다 추가하는 방법\n// 원래 하나만 보낼때는? \n// let store = createStore(reducer);\n// 두개 이상 보낼때는? >> combineReducers  \nlet store = createStore(combineReducers({reducer, reducer2})); \n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/test_shoppingmall/\">\n    {/* BrowserRouter태그를 사용하게 되면 \n    >> /abc로 접속하면 A페이지를 보여주고 /def로 접속하면 B페이지를 보여주는 형식 \n    \n    두가지 방법이 있다\n    1. BrowserRouter >> #기호 없이 동작\n    2. HashRouter >> #기호를 이용해서 동작\n    HashRouter는 라우팅을 안전하게 할 수 있음 \n    >> 주소창은 서버에게 요청하는 것인데 주소창에 #/ 이 뒷부분은 서버에 절대 요청을 하지 않는것을 의미한다\n    BrowserRouter는 라우팅을 리액트가 아닌 서버에게 요청할 수 있어서 위험하다(페이지가 없다고 뜰 수도 있음)\n    즉, BrowserRouter는 서버가 있을 때 사용 / HashRouter는 서버가 없을 때 사용한다\n    만약 BrowserRouter를 서버 없이 사용할 때 사용하고 싶으면 서버라우팅방지를 하는 API를 작성해야함\n    */}\n    {/* \n      redux셋팅 2. App컴포넌트를 Provider로 감싸기\n      이렇게 감싸진애들을 props없이도 state공유가 가능하다\n      state는 index.js에 만들어도 된다\n      위에 만들어진 state를 props로 전송\n     */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}